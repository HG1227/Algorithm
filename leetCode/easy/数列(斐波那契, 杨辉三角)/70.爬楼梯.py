# -*- encoding: utf-8 -*-
"""
@software: PyCharm
@file : 70.爬楼梯.py
@time : 2020/5/5 
"""

'''
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/climbing-stairs
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
'''

"""好的答案
这是一个斐波那契数列,首先到达n层的方法数，
为到达n-1层和n-2层的方法数之和，依次类推，
到达n-1层的方法数为到达n-2层和到达n-3层的方法数之和，
到达n-2层的方法数之和为到达n-3层和n-4层的方法数之和，
依次类推。这些方法没有重复的部分，类似于一个斐波那契数列，
可以举一些简单的例子来证明。
"""

class Solution(object):
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        a = b = 1
        for _ in range(1, n):
            a, b = b, a+b
        return b

if __name__ == '__main__':
    pass